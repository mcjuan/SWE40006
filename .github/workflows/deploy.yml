name: CI/CD Pipeline
on:
  push:
    branches: [main]
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Run tests
        run: |
          python -m pytest -q
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  # NEW: Deploy to Test Server (runs on every push to main)
  deploy-to-test:
    name: Deploy to Test Server
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only deploy on pushes to main branch
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Deploy to test server
        uses: appleboy/ssh-action@master
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        with:
          host: ${{ secrets.TEST_SERVER_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG,AWS_REGION
          script: |
            # Login to ECR
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            
            # Stop old container if running
            docker stop flask-calculator 2>/dev/null || true
            docker rm flask-calculator 2>/dev/null || true
            
            # Pull new image (immutable tag)
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            # Run new container (immutable tag)
            docker run -d \
              --name flask-calculator \
              -p 80:5000 \
              --restart unless-stopped \
              $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            
            # Wait and verify
            echo "Waiting for container to start..."
            sleep 5
            
            # Check if container is running
            if docker ps | grep flask-calculator; then
              echo "✅ Container is running"
              # Test if app responds
              curl -f http://localhost:80 && echo "✅ App is responding" || echo "⚠️ App not responding"
            else
              echo "❌ Container failed to start"
              docker logs flask-calculator
              exit 1
            fi

  # NEW: Deploy to Production Server (only runs on version tags)
  deploy-to-production:
    name: Deploy to Production Server
    needs: build-and-push
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')  # Only deploy on version tags like v1.0.0
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Deploy to production server
        uses: appleboy/ssh-action@master
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG,AWS_REGION
          script: |
            # Login to ECR
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            
            # Stop old container if running
            docker stop flask-calculator 2>/dev/null || true
            docker rm flask-calculator 2>/dev/null || true
            
            # Pull new image (immutable tag)
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            # Run new container (immutable tag)
            docker run -d \
              --name flask-calculator \
              -p 80:5000 \
              --restart unless-stopped \
              $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            
            # Wait and verify
            echo "Waiting for container to start..."
            sleep 5
            
            # Check if container is running
            if docker ps | grep flask-calculator; then
              echo "✅ Container is running on PRODUCTION"
              curl -f http://localhost:80 && echo "✅ App is responding" || echo "⚠️ App not responding"
            else
              echo "❌ Container failed to start"
              docker logs flask-calculator
              exit 1
            fi